/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable

using Beef;
using Beef.Business;
using Beef.Entities;
using Beef.Validation;
using Demo.Service.Business.DataSvc;
using Demo.Service.Common.Entities;
using System;
using System.Threading.Tasks;

namespace Demo.Service.Business
{
    public class ContactManager : IContactManager
    {
        public ContactManager(IContactDataSvc dataService)
        {
            _dataService = dataService;
        }

        #region Private

        private readonly IContactDataSvc _dataService;

        #endregion

        public Task<Contact> CreateAsync(Contact value)
        {
            return ManagerInvoker.Default.InvokeAsync(this, async () =>
            {
                ExecutionContext.Current.OperationType = OperationType.Create;                
                EntityBase.CleanUp(value);

                MultiValidator.Create()
                    .Add(value.Validate(nameof(value)).Mandatory())
                    .Run().ThrowOnError();

                var __result = await _dataService.CreateAsync(value).ConfigureAwait(false);
                Cleaner.Clean(__result);
                return __result;
            });
        }

        public Task<Contact?> GetAsync(Guid id)
        {
            return ManagerInvoker.Default.InvokeAsync(this, async () =>
            {
                ExecutionContext.Current.OperationType = OperationType.Read;
                EntityBase.CleanUp(id);

                MultiValidator.Create()
                    .Add(id.Validate(nameof(id)).Mandatory())
                    .Run().ThrowOnError();

                var __result = await _dataService.GetAsync(id).ConfigureAwait(false);
                Cleaner.Clean(__result);
                return __result;
            });
        }

        public Task<Contact> UpdateAsync(Contact value)
        {
            return ManagerInvoker.Default.InvokeAsync(this, async () =>
            {
                ExecutionContext.Current.OperationType = OperationType.Update;                
                EntityBase.CleanUp(value);

                MultiValidator.Create()                    
                    .Add(value.Validate(nameof(value)).Mandatory())
                    .Run().ThrowOnError();

                var __result = await _dataService.UpdateAsync(value).ConfigureAwait(false);
                Cleaner.Clean(__result);
                return __result;
            });
        }

        public Task DeleteAsync(Guid id)
        {
            return ManagerInvoker.Default.InvokeAsync(this, async () =>
            {
                ExecutionContext.Current.OperationType = OperationType.Delete;
                EntityBase.CleanUp(id);

                MultiValidator.Create()
                    .Add(id.Validate(nameof(id)).Mandatory())
                    .Run().ThrowOnError();

                await _dataService.DeleteAsync(id).ConfigureAwait(false);
            });
        }

        public Task<ContactCollection> GetCollAsync()
        {
            return ManagerInvoker.Default.InvokeAsync(this, async () =>
            {
                ExecutionContext.Current.OperationType = OperationType.Read;
                EntityBase.CleanUp();

                var __result = await _dataService.GetCollAsync().ConfigureAwait(false);
                Cleaner.Clean(__result);
                return __result;
            });
        }
    }
}

#nullable restore