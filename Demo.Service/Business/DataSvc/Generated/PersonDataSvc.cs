/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable

using Beef;
using Beef.Business;
using Beef.Entities;
using Demo.Service.Business.Data;
using Demo.Service.Common.Entities;
using System;
using System.Threading.Tasks;

namespace Demo.Service.Business.DataSvc
{
    public class PersonDataSvc : IPersonDataSvc
    {
        public PersonDataSvc(IPersonData data)
        {
            _data = data;
        }

        #region Private

        private readonly IPersonData _data;

        #endregion

        public Task<Person> CreateAsync(Person value)
        {
            return DataSvcInvoker.Default.InvokeAsync(this, async () => 
            {
                var __result = await _data.CreateAsync(Check.NotNull(value, nameof(value))).ConfigureAwait(false);
                await Beef.Events.Event.PublishValueEventAsync(__result, "Person", "Created").ConfigureAwait(false);;
                ExecutionContext.Current.CacheSet(__result.UniqueKey, __result);
                return __result;
            });
        }
        
        public Task<Person?> GetAsync(Guid id)
        {
            return DataSvcInvoker.Default.InvokeAsync(this, async () => 
            {
                var __key = new UniqueKey(id);
                if (ExecutionContext.Current.TryGetCacheValue<Person?>(__key, out Person? __val))
                    return __val;

                var __result = await _data.GetAsync(id).ConfigureAwait(false);
                ExecutionContext.Current.CacheSet(__key, __result!);
                return __result;
            });
        }
        
        public Task<Person> UpdateAsync(Person value)
        {
            return DataSvcInvoker.Default.InvokeAsync(this, async () => 
            {
                var __result = await _data.UpdateAsync(Check.NotNull(value, nameof(value))).ConfigureAwait(false);
                await Beef.Events.Event.PublishValueEventAsync(__result, "Person", "Updated").ConfigureAwait(false);
                ExecutionContext.Current.CacheSet(__result.UniqueKey, __result);
                return __result;
            });
        }
        
        public Task DeleteAsync(Guid id)
        {
            return DataSvcInvoker.Default.InvokeAsync(this, async () => 
            {
                await _data.DeleteAsync(id).ConfigureAwait(false);
                await Beef.Events.Event.PublishEventAsync("Person", "Deleted", id).ConfigureAwait(false);
                var __key = new UniqueKey(id);
            });
        }
        
        public Task<PersonCollectionResult> GetByArgsAsync(PersonArgs args, PagingArgs? pagingArgs)
        {
            return DataSvcInvoker.Default.InvokeAsync(this, async () => 
            {
                var __result = await _data.GetByArgsAsync(args, pagingArgs).ConfigureAwait(false);
                return __result;
            });
        }
    }
}

#nullable restore
