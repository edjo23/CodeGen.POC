/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable

using Beef;
using Beef.AspNetCore.WebApi;
using Demo.Service.Business;
using Demo.Service.Common.Entities;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Net;

namespace Demo.Service.Api.Controllers
{
    [ApiController]
    [Route("api/v1/persons")]
    public partial class PersonController : ControllerBase
    {
        public PersonController (IPersonManager manager)
        {
            Manager = manager;
        }

        private IPersonManager Manager { get; }

        [HttpPost]
        [ProducesResponseType(typeof(Person), (int)HttpStatusCode.Created)]
        [Route("")]
        public IActionResult Create(Person value)
        {
            return new WebApiPost<Person>(this, () => Manager.CreateAsync(WebApiActionBase.Value(value)),
                operationType: OperationType.Create, statusCode: HttpStatusCode.Created, alternateStatusCode: null);
        }

        [HttpGet]
        [Route("{id}")]
        [ProducesResponseType(typeof(Person), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NotFound)]
        public IActionResult Get(Guid id)
        {
            return new WebApiGet<Person?>(this, () => Manager.GetAsync(id),
                operationType: OperationType.Read, statusCode: HttpStatusCode.OK, alternateStatusCode: HttpStatusCode.NotFound);
        }

        [HttpPut]
        [ProducesResponseType(typeof(Person), (int)HttpStatusCode.OK)]
        [Route("{id}")]
        public IActionResult Update([FromBody] Person value, Guid id)
        {
            value.Id = id;

            return new WebApiPut<Person>(this, () => Manager.UpdateAsync(WebApiActionBase.Value(value)),
                operationType: OperationType.Update, statusCode: HttpStatusCode.OK, alternateStatusCode: null);
        }

        [HttpDelete]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        [Route("{id}")]
        public IActionResult Delete(Guid id)
        {
            return new WebApiDelete(this, () => Manager.DeleteAsync(id),
                operationType: OperationType.Delete, statusCode: HttpStatusCode.NoContent);
        }

        [HttpGet]
        [Route("")]
        [ProducesResponseType(typeof(PersonCollectionResult), (int)HttpStatusCode.OK)]
        public IActionResult GetByArgs(PersonArgs args)
        {
            return new WebApiGet<PersonCollectionResult, PersonCollection, Person>(this, () => Manager.GetByArgsAsync(args, WebApiQueryString.CreatePagingArgs(this)),
                operationType: OperationType.Read, statusCode: HttpStatusCode.OK, alternateStatusCode: null);
        }
    }
}

#nullable restore
