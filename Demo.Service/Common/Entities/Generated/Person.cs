/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable

using Beef.Entities;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace Demo.Service.Common.Entities
{
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public class Person : EntityBase, IGuidIdentifier, IETag, IChangeLog, IEquatable<Person>
    {
        #region Privates

        private Guid _id;
        private string? _firstName;
        private string? _lastName;
        private string? _eTag;
        private ChangeLog? _changeLog;

        #endregion

        #region Properties

        [JsonProperty("id", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="Identifier")]
        public Guid Id
        {
            get => _id;
            set => SetValue(ref _id, value, false, false, nameof(Id));
        }
        
        [JsonProperty("firstName", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="First Name")]
        public string? FirstName
        {
            get => _firstName;
            set => SetValue(ref _firstName, value, false, StringTrim.UseDefault, StringTransform.UseDefault, nameof(FirstName));
        }
        
        [JsonProperty("lastName", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="Last Name")]
        public string? LastName
        {
            get => _lastName;
            set => SetValue(ref _lastName, value, false, StringTrim.UseDefault, StringTransform.UseDefault, nameof(LastName));
        }
        
        [JsonProperty("eTag", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="ETag")]
        public string? ETag
        {
            get => _eTag;
            set => SetValue(ref _eTag, value, false, StringTrim.UseDefault, StringTransform.UseDefault, nameof(ETag));
        }
        
        [JsonProperty("changeLog", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="Change Log")]
        public ChangeLog? ChangeLog
        {
            get => _changeLog;
            set => SetValue(ref _changeLog, value, false, true, nameof(ChangeLog));
        }

        #endregion

        #region IChangeTracking

        public override void AcceptChanges()
        {
            ChangeLog?.AcceptChanges();
            base.AcceptChanges();
        }

        public override void TrackChanges()
        {
      
            ChangeLog?.TrackChanges();
            base.TrackChanges();
        }

        #endregion

        #region UniqueKey

        public override bool HasUniqueKey => true;

        public override string[] UniqueKeyProperties => new string[] { nameof(Id) };

        public static UniqueKey CreateUniqueKey(Guid id) => new UniqueKey(id);

        public override UniqueKey UniqueKey => new UniqueKey(Id);

        #endregion

        #region IsEquitable
        
        public override bool Equals(object? obj)
        {
            if (obj == null || !(obj is Person val))
                return false;

            return Equals(val);
        }

        public bool Equals(Person? value)
        {
            if (((object)value!) == ((object)this))
                return true;
            else if (((object)value!) == null)
                return false;

            return base.Equals((object)value)
                && Equals(Id, value.Id)
                && Equals(FirstName, value.FirstName)
                && Equals(LastName, value.LastName)
                && Equals(ETag, value.ETag)
                && Equals(ChangeLog, value.ChangeLog);
        }

        public static bool operator == (Person? a, Person? b) => Equals(a, b);

        public static bool operator != (Person? a, Person? b) => !Equals(a, b);

        public override int GetHashCode()
        {
            var hash = new HashCode();

            hash.Add(Id);
            hash.Add(FirstName);
            hash.Add(LastName);
            hash.Add(ETag);
            hash.Add(ChangeLog);

            return base.GetHashCode() ^ hash.ToHashCode();
        }

        #endregion

        #region ICopyFrom

        public override void CopyFrom(object from)
        {
            var fval = ValidateCopyFromType<Person>(from);
            CopyFrom(fval);
        }

        public void CopyFrom(Person from)
        {
            CopyFrom((EntityBase)from);
            Id = from.Id;
            FirstName = from.FirstName;
            LastName = from.LastName;
            ETag = from.ETag;
            ChangeLog = CopyOrClone(from.ChangeLog, ChangeLog);
        }

        #endregion

        #region ICloneable

        public override object Clone()
        {
            var clone = new Person();
            clone.CopyFrom(this);
            return clone;
        }        

        #endregion
        
        #region ICleanUp

        public override void CleanUp()
        {
            base.CleanUp();
            Id = Cleaner.Clean(Id);
            FirstName = Cleaner.Clean(FirstName, StringTrim.UseDefault, StringTransform.UseDefault);
            LastName = Cleaner.Clean(LastName, StringTrim.UseDefault, StringTransform.UseDefault);
            ETag = Cleaner.Clean(ETag, StringTrim.UseDefault, StringTransform.UseDefault);
            ChangeLog = Cleaner.Clean(ChangeLog);
        }

        public override bool IsInitial
        {
            get
            {
              return Cleaner.IsInitial(Id)
                  && Cleaner.IsInitial(FirstName)
                  && Cleaner.IsInitial(LastName)
                  && Cleaner.IsInitial(ETag)
                  && Cleaner.IsInitial(ChangeLog);
            }
        }

        #endregion
    }

    public class PersonCollection : EntityBaseCollection<Person>
    {
        #region Constructors

        public PersonCollection() { }

        public PersonCollection(IEnumerable<Person> entities) => AddRange(entities);
        
        #endregion

        #region ICloneable
        
        public override object Clone()
        {
            var clone = new PersonCollection();
            foreach (Person item in this)
            {
                clone.Add((Person)item.Clone());
            }
                
            return clone;
        }
        
        #endregion

        #region Operator

        public static implicit operator PersonCollection(PersonCollectionResult result) => result?.Result!;

        #endregion
    }

    public class PersonCollectionResult : EntityCollectionResult<PersonCollection, Person>
    {
        public PersonCollectionResult() { }
        
        public PersonCollectionResult(PagingArgs? paging) : base(paging) { }
        
        public PersonCollectionResult(IEnumerable<Person> collection, PagingArgs? paging = null) : base(paging) => Result.AddRange(collection);
        
        public override object Clone()
        {
            var clone = new PersonCollectionResult();
            clone.CopyFrom(this);
            return clone;
        }
    }
}

#nullable restore