/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable

{{#each DataClass.Usings}}
using {{this}};
{{/each}}

namespace {{DataClass.Namespace}}
{
    public {{#if DataClass.Partial}}partial {{/if}}class {{DataClass.Name}} : {{DataInterface.Name}}
    {
        {{#if DataClass.PrivateConstructor}}private{{else}}public{{/if}} {{DataClass.Name}}(IDataStorage dataStorage)
        {
            _dataStorage = dataStorage;
        }

        private readonly IDataStorage _dataStorage;

        {{#each DataClass.Operations}}
        public Task{{#if ReturnType}}<{{ReturnType}}>{{/if}} {{Name}}Async({{#each Parameters}}{{Type}} {{Name}}{{#unless @last}}, {{/unless}}{{/each}})
        {
            {{#if IsCreate}}
            {{Parameters.[0].Name}}.Id = Guid.NewGuid();
            _dataStorage.Write({{Parameters.[0].Name}});
            return Task.FromResult({{Parameters.[0].Name}});
            {{/if}}
            {{#if IsGet}}
            return Task.FromResult<{{ReturnType}}>(_dataStorage.Read<{{../EntityClass.Name}}>({{Parameters.[0].Name}}));
            {{/if}}
            {{#if IsGetColl}}
            return Task.FromResult<{{ReturnType}}>(new {{ReturnType}}(_dataStorage.Read<{{../EntityClass.Name}}>()));
            {{/if}}
            {{#if IsUpdate}}
            _dataStorage.Write({{Parameters.[0].Name}});
            return Task.FromResult({{Parameters.[0].Name}});
            {{/if}}
            {{#if IsDelete}}
            _dataStorage.Delete(_dataStorage.Read<{{../EntityClass.Name}}>({{Parameters.[0].Name}}));
            return Task.CompletedTask;
            {{/if}}
        }
        {{#unless @last}}

        {{/unless}}
        {{/each}}
    }
}

#nullable restore
