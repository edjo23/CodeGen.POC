/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable

{{#each Manager.Usings}}
using {{this}};
{{/each}}

namespace {{Manager.Namespace}}
{
    public {{#if Manager.Partial}}partial {{/if}}class {{Manager.Name}} : {{ManagerInterface.Name}}
    {
        {{#if Manager.PrivateConstructor}}private{{else}}public{{/if}} {{Manager.Name}}({{DataServiceInterface.Name}} dataService)
        {
            _dataService = dataService;
        }

        #region Private

        private readonly {{DataServiceInterface.Name}} _dataService;

        {{#if Manager.Partial}}
        {{#each Manager.Operations}}
        {{#if IsCreate}}
        private readonly Func<{{#each Parameters}}{{Type}}, {{/each}}Task>? _OnPreValidate{{Name}}Async;
        private readonly Action<MultiValidator{{#each Parameters}}, {{Type}}{{/each}}>? _On{{Name}}Validate;
        private readonly Func<{{#each Parameters}}{{Type}}, {{/each}}Task>? _OnBefore{{Name}}Async;
        private readonly Func<{{ReturnType}}, Task>? _OnAfter{{Name}}Async;
        {{/if}}
        {{#if IsGet}}
        private readonly Func<{{#each Parameters}}{{Type}}, {{/each}}Task>? _OnPreValidate{{Name}}Async;
        private readonly Action<MultiValidator{{#each Parameters}}, {{Type}}{{/each}}>? _On{{Name}}Validate;
        private readonly Func<{{#each Parameters}}{{Type}}, {{/each}}Task>? _OnBefore{{Name}}Async;
        private readonly Func<{{ReturnType}}, {{#each Parameters}}{{Type}}, {{/each}}Task>? _OnAfter{{Name}}Async;
        {{/if}}
        {{#if IsGetColl}}
        private readonly Func<{{#each Parameters}}{{Type}}, {{/each}}Task>? _OnPreValidate{{Name}}Async;
        private readonly Action<MultiValidator{{#each Parameters}}, {{Type}}{{/each}}>? _On{{Name}}Validate;
        private readonly Func<{{#each Parameters}}{{Type}}, {{/each}}Task>? _OnBefore{{Name}}Async;
        private readonly Func<{{ReturnType}}, {{#each Parameters}}{{Type}}, {{/each}}Task>? _OnAfter{{Name}}Async;
        {{/if}}
        {{#if IsUpdate}}
        private readonly Func<{{#each Parameters}}{{Type}}, {{/each}}Task>? _OnPreValidate{{Name}}Async;
        private readonly Action<MultiValidator{{#each Parameters}}, {{Type}}{{/each}}>? _On{{Name}}Validate;
        private readonly Func<{{#each Parameters}}{{Type}}, {{/each}}Task>? _OnBefore{{Name}}Async;
        private readonly Func<{{ReturnType}}, Task>? _OnAfter{{Name}}Async;
        {{/if}}
        {{#if IsDelete}}
        private readonly Func<{{#each Parameters}}{{Type}}, {{/each}}Task>? _OnPreValidate{{Name}}Async;
        private readonly Action<MultiValidator{{#each Parameters}}, {{Type}}{{/each}}>? _On{{Name}}Validate;
        private readonly Func<{{#each Parameters}}{{Type}}, {{/each}}Task>? _OnBefore{{Name}}Async;
        private readonly Func<{{#each Parameters}}{{Type}}, {{/each}}Task>? _OnAfter{{Name}}Async;
        {{/if}}

        {{/each}}
        {{/if}}
        #endregion

        {{#each Manager.Operations}}
        public Task{{#if ReturnType}}<{{ReturnType}}>{{/if}} {{Name}}Async({{#each Parameters}}{{Type}} {{Name}}{{#unless @last}}, {{/unless}}{{/each}})
        {
            return ManagerInvoker.Default.InvokeAsync(this, async () =>
            {
            {{#if IsCreate}}
                ExecutionContext.Current.OperationType = OperationType.Create;                
                EntityBase.CleanUp({{#each Parameters}}{{Name}}{{#unless @last}}, {{/unless}}{{/each}});
                {{#if ../Manager.Partial}}
                if (_OnPreValidate{{Name}}Async != null) await _OnPreValidate{{Name}}Async({{#each Parameters}}{{Name}}{{#unless @last}}, {{/unless}}{{/each}}).ConfigureAwait(false);
                {{/if}}

                MultiValidator.Create()
                    {{#each Parameters}}
                    {{#if Mandatory}}
                    .Add({{Name}}.Validate(nameof({{Name}})).Mandatory())
                    {{/if}}
                    {{/each}}
                    {{#each Parameters}}
                    {{#if Validator}}
                    .Add({{Name}}.Validate(nameof({{Name}})).Entity({{Validator}}.Default))
                    {{/if}}
                    {{/each}}
                    {{#if ../Manager.Partial}}
                    .Additional((__mv) => _On{{Name}}Validate?.Invoke(__mv{{#each Parameters}}, {{Name}}{{/each}}))
                    {{/if}}
                    .Run().ThrowOnError();

                {{#if ../Manager.Partial}}
                if (_OnBefore{{Name}}Async != null) await _OnBefore{{Name}}Async({{#each Parameters}}{{Name}}{{#unless @last}}, {{/unless}}{{/each}}).ConfigureAwait(false);
                {{/if}}
                var __result = await _dataService.{{Name}}Async({{#each Parameters}}{{Name}}{{#unless @last}}, {{/unless}}{{/each}}).ConfigureAwait(false);
                {{#if ../Manager.Partial}}
                if (_OnAfter{{Name}}Async != null) await _OnAfter{{Name}}Async(__result).ConfigureAwait(false);
                {{/if}}
                Cleaner.Clean(__result);
                return __result;
            {{/if}}
            {{#if IsGet}}
                ExecutionContext.Current.OperationType = OperationType.Read;
                EntityBase.CleanUp({{#each Parameters}}{{Name}}{{#unless @last}}, {{/unless}}{{/each}});
                {{#if ../Manager.Partial}}
                if (_OnPreValidate{{Name}}Async != null) await _OnPreValidate{{Name}}Async({{#each Parameters}}{{Name}}{{#unless @last}}, {{/unless}}{{/each}}).ConfigureAwait(false);
                {{/if}}

                MultiValidator.Create()
                    {{#each Parameters}}
                    {{#if Mandatory}}
                    .Add({{Name}}.Validate(nameof({{Name}})).Mandatory())
                    {{/if}}
                    {{/each}}
                    {{#if ../Manager.Partial}}
                    .Additional((__mv) => _On{{Name}}Validate?.Invoke(__mv{{#each Parameters}}, {{Name}}{{/each}}))
                    {{/if}}
                    .Run().ThrowOnError();

                {{#if ../Manager.Partial}}
                if (_OnBefore{{Name}}Async != null) await _OnBefore{{Name}}Async({{#each Parameters}}{{Name}}{{#unless @last}}, {{/unless}}{{/each}}).ConfigureAwait(false);
                {{/if}}
                var __result = await _dataService.{{Name}}Async({{#each Parameters}}{{Name}}{{#unless @last}}, {{/unless}}{{/each}}).ConfigureAwait(false);
                {{#if ../Manager.Partial}}
                if (_OnAfter{{Name}}Async != null) await _OnAfter{{Name}}Async(__result{{#each Parameters}}, {{Name}}{{/each}}).ConfigureAwait(false);
                {{/if}}
                Cleaner.Clean(__result);
                return __result;
            {{/if}}
            {{#if IsGetColl}}
                ExecutionContext.Current.OperationType = OperationType.Read;
                EntityBase.CleanUp({{#each Parameters}}{{Name}}{{#unless @last}}, {{/unless}}{{/each}});
                {{#if ../Manager.Partial}}
                if (_OnPreValidate{{Name}}Async != null) await _OnPreValidate{{Name}}Async({{#each Parameters}}{{Name}}{{#unless @last}}, {{/unless}}{{/each}}).ConfigureAwait(false);
                {{/if}}

                {{#if Parameters}}
                MultiValidator.Create()
                    {{#each Parameters}}
                    {{#if Mandatory}}
                    .Add({{Name}}.Validate(nameof({{Name}})).Mandatory())
                    {{/if}}
                    {{/each}}
                    {{#each Parameters}}
                    {{#if Validator}}
                    .Add({{Name}}.Validate(nameof({{Name}})).Entity({{Validator}}.Default))
                    {{/if}}
                    {{/each}}
                    {{#if ../Manager.Partial}}
                    .Additional((__mv) => _On{{Name}}Validate?.Invoke(__mv{{#each Parameters}}, {{Name}}{{/each}}))
                    {{/if}}
                    .Run().ThrowOnError();

                {{/if}}
                {{#if ../Manager.Partial}}
                if (_OnBefore{{Name}}Async != null) await _OnBefore{{Name}}Async({{#each Parameters}}{{Name}}{{#unless @last}}, {{/unless}}{{/each}}).ConfigureAwait(false);
                {{/if}}
                var __result = await _dataService.{{Name}}Async({{#each Parameters}}{{Name}}{{#unless @last}}, {{/unless}}{{/each}}).ConfigureAwait(false);
                {{#if ../Manager.Partial}}
                if (_OnAfter{{Name}}Async != null) await _OnAfter{{Name}}Async(__result{{#each Parameters}}, {{Name}}{{/each}}).ConfigureAwait(false);
                {{/if}}
                Cleaner.Clean(__result);
                return __result;
            {{/if}}
            {{#if IsUpdate}}
                ExecutionContext.Current.OperationType = OperationType.Update;                
                EntityBase.CleanUp({{#each Parameters}}{{Name}}{{#unless @last}}, {{/unless}}{{/each}});
                {{#if ../Manager.Partial}}
                if (_OnPreValidate{{Name}}Async != null) await _OnPreValidate{{Name}}Async({{#each Parameters}}{{Name}}{{#unless @last}}, {{/unless}}{{/each}}).ConfigureAwait(false);
                {{/if}}

                MultiValidator.Create()                    
                    {{#each Parameters}}
                    {{#if Mandatory}}
                    .Add({{Name}}.Validate(nameof({{Name}})).Mandatory())
                    {{/if}}
                    {{/each}}
                    {{#each Parameters}}
                    {{#if Validator}}
                    .Add({{Name}}.Validate(nameof({{Name}})).Entity({{Validator}}.Default))
                    {{/if}}
                    {{/each}}
                    {{#if ../Manager.Partial}}
                    .Additional((__mv) => _On{{Name}}Validate?.Invoke(__mv, {{Parameter.Name}}))
                    {{/if}}
                    .Run().ThrowOnError();

                {{#if ../Manager.Partial}}
                if (_OnBefore{{Name}}Async != null) await _OnBefore{{Name}}Async({{#each Parameters}}{{Name}}{{#unless @last}}, {{/unless}}{{/each}}).ConfigureAwait(false);
                {{/if}}
                var __result = await _dataService.{{Name}}Async({{#each Parameters}}{{Name}}{{#unless @last}}, {{/unless}}{{/each}}).ConfigureAwait(false);
                {{#if ../Manager.Partial}}
                if (_OnAfter{{Name}}Async != null) await _OnAfter{{Name}}Async(__result).ConfigureAwait(false);
                {{/if}}
                Cleaner.Clean(__result);
                return __result;
            {{/if}}
            {{#if IsDelete}}
                ExecutionContext.Current.OperationType = OperationType.Delete;
                EntityBase.CleanUp({{#each Parameters}}{{Name}}{{#unless @last}}, {{/unless}}{{/each}});
                {{#if ../Manager.Partial}}
                if (_OnPreValidate{{Name}}Async != null) await _OnPreValidate{{Name}}Async({{#each Parameters}}{{Name}}{{#unless @last}}, {{/unless}}{{/each}}).ConfigureAwait(false);
                {{/if}}

                MultiValidator.Create()
                    {{#each Parameters}}
                    {{#if Mandatory}}
                    .Add({{Name}}.Validate(nameof({{Name}})).Mandatory())
                    {{/if}}
                    {{/each}}
                    {{#each Parameters}}
                    {{#if Validator}}
                    .Add({{Name}}.Validate(nameof({{Name}})).Entity({{Validator}}.Default))
                    {{/if}}
                    {{/each}}
                    {{#if ../Manager.Partial}}
                    .Additional((__mv) => _On{{Name}}Validate?.Invoke(__mv{{#each Parameters}}, {{Name}}{{/each}}))
                    {{/if}}
                    .Run().ThrowOnError();

                {{#if ../Manager.Partial}}
                if (_OnBefore{{Name}}Async != null) await _OnBefore{{Name}}Async({{#each Parameters}}{{Name}}{{#unless @last}}, {{/unless}}{{/each}}).ConfigureAwait(false);
                {{/if}}
                await _dataService.{{Name}}Async({{#each Parameters}}{{Name}}{{#unless @last}}, {{/unless}}{{/each}}).ConfigureAwait(false);
                {{#if ../Manager.Partial}}
                if (_OnAfter{{Name}}Async != null) await _OnAfter{{Name}}Async({{#each Parameters}}{{Name}}{{#unless @last}}, {{/unless}}{{/each}}{{/each}}).ConfigureAwait(false);
                {{/if}}
            {{/if}}
            });
        }
        {{#unless @last}}

        {{/unless}}
        {{/each}}
    }
}

#nullable restore