/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable

{{#each ControllerClass.Usings}}
using {{this}};
{{/each}}

namespace {{ControllerClass.Namespace}}
{
    [ApiController]
    [Route("{{ControllerClass.WebApiRoutePrefix}}")]
    public {{#if ControllerClass.Partial}}partial {{/if}}class {{ControllerClass.Name}} : ControllerBase
    {
        {{#if ControllerClass.PrivateConstructor}}private{{else}}public{{/if}} {{ControllerClass.Name}} ({{ManagerInterface.Name}} manager)
        {
            Manager = manager;
        }

        private {{ManagerInterface.Name}} Manager { get; }

        {{#each ControllerClass.Operations}}
        {{#if IsCreate}}
        [HttpPost]
        [ProducesResponseType(typeof({{UnderlyingReturnType}}), (int)HttpStatusCode.Created)]
        [Route("{{WebApiRoute}}")]
        public IActionResult {{Name}}({{Parameter.Type}} {{Parameter.Name}})
        {
            return new WebApiPost<{{ReturnType}}>(this, () => Manager.{{Name}}Async(WebApiActionBase.Value({{Parameter.Name}})),
                operationType: OperationType.Create, statusCode: HttpStatusCode.Created, alternateStatusCode: null);
        }
        {{/if}}
        {{#if IsGet}}
        [HttpGet]
        [Route("{{WebApiRoute}}")]
        [ProducesResponseType(typeof({{UnderlyingReturnType}}), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NotFound)]
        public IActionResult {{Name}}({{#each Parameters}}{{Type}} {{Name}}{{#unless @last}}, {{/unless}}{{/each}})
        {
            return new WebApiGet<{{ReturnType}}>(this, () => Manager.{{Name}}Async({{#each Parameters}}{{Name}}{{#unless @last}}, {{/unless}}{{/each}}),
                operationType: OperationType.Read, statusCode: HttpStatusCode.OK, alternateStatusCode: HttpStatusCode.NotFound);
        }
        {{/if}}
        {{#if IsGetColl}}
        [HttpGet]
        [Route("{{WebApiRoute}}")]
        [ProducesResponseType(typeof({{UnderlyingReturnType}}), (int)HttpStatusCode.OK)]
        public IActionResult {{Name}}({{#each Parameters}}{{Type}} {{Name}}{{#unless @last}}, {{/unless}}{{/each}})
        {
            return new WebApiGet<{{ReturnType}}{{#if HasPagingArgs}}, {{../Name}}Collection, {{../Name}}{{/if}}>(this, () => Manager.{{Name}}Async({{#each Parameters}}{{Name}}{{#unless @last}}, {{/unless}}{{/each}}{{#if HasPagingArgs}}, WebApiQueryString.CreatePagingArgs(this){{/if}}),
                operationType: OperationType.Read, statusCode: HttpStatusCode.OK, alternateStatusCode: null);
        }
        {{/if}}
        {{#if IsUpdate}}
        [HttpPut]
        [ProducesResponseType(typeof({{UnderlyingReturnType}}), (int)HttpStatusCode.OK)]
        [Route("{{WebApiRoute}}")]
        public IActionResult {{Name}}({{#each Parameters}}{{#if @first}}[FromBody] {{/if}}{{Type}} {{Name}}{{#unless @last}}, {{/unless}}{{/each}})
        {
            {{#each Parameters}}
            {{#unless @first}}
            {{../Parameters.[0].Name}}.{{EntityProperty}} = {{Name}};
            {{/unless}}
            {{/each}}

            return new WebApiPut<{{ReturnType}}>(this, () => Manager.{{Name}}Async(WebApiActionBase.Value({{Parameter.Name}})),
                operationType: OperationType.Update, statusCode: HttpStatusCode.OK, alternateStatusCode: null);
        }
        {{/if}}
        {{#if IsDelete}}
        [HttpDelete]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        [Route("{{WebApiRoute}}")]
        public IActionResult {{Name}}({{#each Parameters}}{{Type}} {{Name}}{{#unless @last}}, {{/unless}}{{/each}})
        {
            return new WebApiDelete(this, () => Manager.{{Name}}Async({{Parameter.Name}}),
                operationType: OperationType.Delete, statusCode: HttpStatusCode.NoContent);
        }
        {{/if}}
        {{#unless @last}}

        {{/unless}}
        {{/each}}
    }
}

#nullable restore
